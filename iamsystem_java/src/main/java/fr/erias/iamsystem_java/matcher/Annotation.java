package fr.erias.iamsystem_java.matcher;

import fr.erias.iamsystem_java.brat.BratFormatters;
import fr.erias.iamsystem_java.brat.IBratFormatterF;
import fr.erias.iamsystem_java.keywords.IKeyword;
import fr.erias.iamsystem_java.tokenize.IToken;
import fr.erias.iamsystem_java.tokenize.ITokenizer;
import fr.erias.iamsystem_java.tree.INode;
import java.util.Collection;
import java.util.List;

/**
 * Matcher output
 *
 * @author Sebastien Cossin
 * @param <T>
 */
public class Annotation<T extends IToken> extends Span<T> implements IAnnotation<T> {

  private final List<Collection<String>> algos;
  private final INode lastState;
  private final List<T> stopTokens;
  private IBratFormatterF bratFormatter = BratFormatters.tokenFormatter;

  /**
   * Create an annotation
   *
   * @param tokens a sequence of generic tokens generated by a {@link ITokenizer}
   * @param algos for each token, the list of algorithms that matched.
   * @param lastState a final state of iamsystem algorithm containing the keyword that matched this
   *     sequence of tokens.
   * @param stopTokens the list of stopwords tokens of the document.
   */
  public Annotation(
      List<T> tokens, List<Collection<String>> algos, INode lastState, List<T> stopTokens) {
    super(tokens);
    this.algos = algos;
    this.lastState = lastState;
    this.stopTokens = stopTokens;
  }

  @Override
  public List<Collection<String>> getAlgos() {
    return algos;
  }

  @Override
  public List<T> stopTokens() {
    return stopTokens;
  }

  @Override
  public Collection<IKeyword> getKeywords() {
    return lastState.getKeywords();
  }

  @Override
  public IBratFormatterF formatter() {
    return this.bratFormatter;
  }

  /**
   * Change the BratFormatter.
   *
   * @param bratFormatter a {@link IBratFormatterF} available in {@link BratFormatters}.
   */
  public void setBratFormatter(IBratFormatterF bratFormatter) {
    this.bratFormatter = bratFormatter;
  }
}
