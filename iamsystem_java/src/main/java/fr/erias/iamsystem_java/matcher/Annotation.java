package fr.erias.iamsystem_java.matcher;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import fr.erias.iamsystem_java.brat.BratFormatters;
import fr.erias.iamsystem_java.brat.IBratFormatterF;
import fr.erias.iamsystem_java.keywords.IKeyword;
import fr.erias.iamsystem_java.tokenize.IToken;
import fr.erias.iamsystem_java.tokenize.ITokenizer;
import fr.erias.iamsystem_java.tree.INode;

/**
 * Matcher output
 *
 * @author Sebastien Cossin
 */
public class Annotation extends Span implements IAnnotation
{

	private final List<Collection<String>> algos;
	private final INode lastState;
	private final List<IToken> stopTokens;
	private IBratFormatterF bratFormatter = BratFormatters.tokenFormatter;

	/**
	 * Create an annotation
	 *
	 * @param tokens     a sequence of generic tokens generated by a
	 *                   {@link ITokenizer}
	 * @param algos      for each token, the list of algorithms that matched.
	 * @param lastState  a final state of iamsystem algorithm containing the keyword
	 *                   that matched this sequence of tokens.
	 * @param stopTokens the list of stopwords tokens of the document.
	 */
	public Annotation(List<IToken> tokens, List<Collection<String>> algos, INode lastState, List<IToken> stopTokens)
	{
		super(tokens);
		this.algos = algos;
		this.lastState = lastState;
		this.stopTokens = stopTokens;
	}

	@Override
	public int compareTo(IAnnotation o)
	{
		int diffStart = this.start() - o.start();
		if (diffStart != 0)
		{
			return diffStart;
		} else
		{
			return this.end() - o.end();
		}
	}

	@Override
	public IBratFormatterF formatter()
	{
		return this.bratFormatter;
	}

	@Override
	public List<Collection<String>> getAlgos()
	{
		return algos;
	}

	@Override
	public Collection<IKeyword> getKeywords()
	{
		return lastState.getKeywords();
	}

	private String keywords2Str()
	{
		return this.getKeywords().stream().map(k -> k.toString()).collect(Collectors.joining(";"));
	}

	@Override
	public INode lastState()
	{
		return this.lastState;
	}

	/**
	 * Change the BratFormatter.
	 *
	 * @param bratFormatter a {@link IBratFormatterF} available in
	 *                      {@link BratFormatters}.
	 */
	public void setBratFormatter(IBratFormatterF bratFormatter)
	{
		this.bratFormatter = bratFormatter;
	}

	@Override
	public List<IToken> stopTokens()
	{
		return stopTokens;
	}

	@Override
	public String toString()
	{
		return String.format("%s\t%s", this.bratFormatter.getFormat(this), keywords2Str());
	}
}
